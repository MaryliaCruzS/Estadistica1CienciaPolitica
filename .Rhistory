ylim(1400, 1700)
library(lsr)
ic_grupo=data1%>%
dplyr::group_by(P319) %>%
dplyr::summarise(Media = mean(sueldoliquido, na.rm=T),
min = ciMean(sueldoliquido,conf = 0.95, na.rm=T)[1],
max = ciMean(sueldoliquido,conf = 0.95, na.rm=T)[2]
)
ic_grupo
library(ggplot2)
ggplot(ic_grupo, aes(x= P319, y =Media)) +
geom_errorbar(aes(ymin=min, ymax=max), width = 0.2)+
geom_text(aes(label=paste(round(Media, 2))), size=4)+
xlab("Preferencia de distrito") + ylab("Ingreso liquido en soles")+
ylim(1400, 1700)
library(ggplot2)
ggplot(ic_grupo, aes(x= P319, y =Media)) +
geom_errorbar(aes(ymin=min, ymax=max), width = 0.2)+
geom_text(aes(label=paste(round(Media, 2))), size=4)+
xlab("Preferencia de distrito") + ylab("Ingreso liquido en soles")+
ylim(1400, 1700)
library(ggplot2)
ggplot(ic_grupo, aes(x= P07, y =Media)) +
geom_errorbar(aes(ymin=linf, ymax=max), width = 0.2)+
geom_text(aes(label=paste(round(Media, 2))), size=4)+
xlab("Tipo de colegio") + ylab("Ingreso liquido en soles")+
ylim(1000, 2000)
library(ggplot2)
ggplot(ic_grupo, aes(x= P07, y =Media)) +
geom_errorbar(aes(ymin=linf, ymax=lsup), width = 0.2)+
geom_text(aes(label=paste(round(Media, 2))), size=4)+
xlab("Tipo de colegio") + ylab("Ingreso liquido en soles")+
ylim(1000, 2000)
data1$P07=as.factor(data1$P07)
data1$P07=factor(data1$P07,
levels = levels(data1$P07),
labels = c("Público","Privado"),
ordered = F)
library(lsr)
ic_grupo=data1%>%
dplyr::group_by(P07) %>%
dplyr::summarise(Media = mean(sueldoliquido, na.rm=T),
linf = ciMean(sueldoliquido,conf = 0.95, na.rm=T)[1],
lsup = ciMean(sueldoliquido,conf = 0.95, na.rm=T)[2]
)
ic_grupo
library(ggplot2)
ggplot(ic_grupo, aes(x= P07, y =Media)) +
geom_errorbar(aes(ymin=linf, ymax=lsup), width = 0.2)+
geom_text(aes(label=paste(round(Media, 2))), size=4)+
xlab("Tipo de colegio") + ylab("Ingreso liquido en soles")+
ylim(1000, 2000)
table(data1$P319)
tabla2 = data1 %>%
filter(P319 =="Mismo distrito" | apoyo == "Otro distrito") %>%
group_by(P07) %>%
count(Preferencia = P319, name="N") %>%
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
tabla2 = data1 %>%
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
group_by(P07) %>%
count(Preferencia = P319, name="N") %>%
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
tabla2 = data1 %>%
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
group_by(P07) %>%
count(P319 = P319, name="N") %>%
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
tabla2 = data1 |>
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") |>
group_by(P07) |>
count(P319 = P319, name="N")|>
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
tabla2 = data1 |>
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") |>
group_by(P07) |>
count(P319r = P319, name="N")|>
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
table(data1$P319)
library(dplyr)
tabla2 = data1 |>
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") |>
group_by(P07) |>
count(P319r = P319, name="N")|>
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
library(dplyr)
tabla2 = data1 |>
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") |>
group_by(P07) |>
count(P319r = P319, name="N")|>
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
table(data1$P07)
library(dplyr)
tabla2 = data1 %>%
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
group_by(P07) %>%
count(P319r = P319, name="N")%>%
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
library(dplyr)
tabla2 = data1 %>%
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
group_by(P07) %>%
count(P319r = P319, name="N") %>%
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
library(dplyr)
tabla2 = data1 %>%
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
group_by(P07) %>%
count(P319r = P319, name="N") %>%
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
library(dplyr)
tabla2 = data1 %>%
filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
group_by(P07) %>%
count(P319r = P319, name="N") %>%
mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
library(dplyr)
tabla2 = data1 %>%
dplyr::filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
dplyr::group_by(P07) %>%
dplyr::count(P319r=P319, name="N") %>%
dplyr::mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
tabla2
tabla2 = tabla2[-c(2,4),]
graf2 = ggplot(tabla2, aes(x=sexo, y=Por))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=liminf, ymax=limsup), width=0.2)+
geom_text(aes(label=paste(round(Por, 1))), vjust=-1, size=4)+
xlab("Sexo del docente") + ylab("Porcentaje que recibió atención psicológica")+
ylim(0, 60)
graf2
graf2 = ggplot(tabla2, aes(x=sexo, y=Por))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=liminf, ymax=limsup), width=0.2)+
geom_text(aes(label=paste(round(Por, 1))), vjust=-1, size=4)+
xlab("Sexo del docente") + ylab("Porcentaje que recibió atención psicológica")+
ylim(0, 100)
graf2
tabla2 = tabla2[-c(2,4),]
tabla2
library(dplyr)
tabla2 = data1 %>%
dplyr::filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
dplyr::group_by(P07) %>%
dplyr::count(P319r=P319, name="N") %>%
dplyr::mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
tabla2
tabla2 = tabla2[-c(2,4),]
tabla2
tabla2_1 = tabla2[-c(2,4),]
graf2 = ggplot(tabla2_1, aes(x=P07, y=P319r))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=liminf, ymax=limsup), width=0.2)+
geom_text(aes(label=paste(round(Por, 1))), vjust=-1, size=4)+
xlab("Sexo del docente") + ylab("Porcentaje que recibió atención psicológica")+
ylim(0, 100)
graf2
tabla2_1$Por=as.numeric(tabla2_1$Por)
tabla2_1
tabla2_1
tabla2_1 = tabla2[-c(2,4),]
tabla2_1
library(dplyr)
tabla2 = data1 %>%
dplyr::filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
dplyr::group_by(P07) %>%
dplyr::count(P319r=P319, name="N") %>%
dplyr::mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
tabla2
tabla2_1 = tabla2[-c(2,4),]
tabla2_1
graf2 = ggplot(tabla2_1, aes(x=P07, y=P319r))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=liminf, ymax=limsup), width=0.2)+
geom_text(aes(label=paste(round(Por, 1))), vjust=-1, size=4)+
xlab("Sexo del docente") + ylab("Porcentaje que recibió atención psicológica")+
ylim(0, 100)
graf2
graf2 = ggplot(tabla2_1, aes(x=P07, y=P319r))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=liminf, ymax=limsup), width=0.2)+
geom_text(aes(label=paste(round(Por, 1))), vjust=-1, size=4)+
xlab("Sexo del docente") + ylab("Porcentaje que recibió atención psicológica")+
ylim(50, 100)
graf2
tabla2_1$P07 <- factor(tabla2_1$P07)
tabla2_1
graf2 = ggplot(tabla2_1, aes(x=P07, y=P319r))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=liminf, ymax=limsup), width=0.2)+
geom_text(aes(label=paste(round(Por, 1))), vjust=-1, size=4)+
xlab("Sexo del docente") + ylab("Porcentaje que recibió atención psicológica")+
ylim(50, 100)
graf2
graf2 = ggplot(tabla2_1, aes(x=P07, y=Por))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=liminf, ymax=limsup), width=0.2)+
geom_text(aes(label=paste(round(Por, 1))), vjust=-1, size=4)+
xlab("Sexo del docente") + ylab("Porcentaje que recibió atención psicológica")+
ylim(50, 100)
graf2
graf2 = ggplot(tabla2_1, aes(x=P07, y=Por))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=liminf, ymax=limsup), width=0.2)+
geom_text(aes(label=paste(round(Por, 1))), vjust=-1, size=4)+
xlab("Sexo del docente") + ylab("Porcentaje que recibió atención psicológica")+
ylim(50, 100)
graf2
datos <- data.frame(año = rep(2010:2019, each = 20),
sexo = sample(c("mujer", "hombre"), size = 200, replace = TRUE))
# Calcular la tabla de contingencia
tabla_contingencia <- table(datos$año, datos$sexo)
# Calcular el porcentaje por año
porcentaje <- prop.table(tabla_contingencia, margin = 1) * 100
# Mostrar los resultados
print(porcentaje)
quarto::quarto_render()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render("index.Rmd")
rmarkdown::render("index.Rmd")
rmarkdown::render_site()
# Cargar librerías necesarias
library(knitr)
library(kableExtra)
# Crear la tabla con los temas de cada semana
tabla_curso <- data.frame(
Semana = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
Fechas = c("24/03 – 29/03", "31/03 – 5/04", "07/04 – 12/04", "14/04 – 19/04",
"21/04 – 26/04", "28/04 – 03/05", "5/05 – 10/05", "12/05 – 17/05",
"19/05 – 24/05", "26/05 – 31/05", "02/06 – 7/06", "9/06 – 14/06",
"16/06 – 21/06", "23/06 – 28/06"),
Tema = c("Presentación del curso. Niveles de medición y variables. Organización de una base de datos.",
"Estadística descriptiva. Medidas de centralidad: media, mediana y moda. Distribución y visualización de datos.",
"Medidas de dispersión: varianza y desviación estándar. Tablas resumen. Gráficos con ggplot2.",
"Intervalos de confianza de una media. Intervalos de confianza de una proporción. Visualización de comparación de medias e intervalos de confianza con ggplot.",
"Estadística bivariada. Pruebas de significancia. Comparación entre grupos. P-values. Prueba T.",
"Tablas de contingencia y chi-cuadrado. Gráficos de barras con ggplot.",
"Tablas de contingencia y chi-cuadrado. Gráficos de barras con ggplot.",
"Repaso Pre parcial.",
"Parcial.",
"Asociación y correlación. Variables dependientes e independientes. Diagramas de dispersión. Coeficiente de correlación de Pearson y R².",
"Regresión simple. Método de mínimos cuadrados. Ecuación de la recta.",
"Introducción a la regresión múltiple.",
"Regresión múltiple II. Variables de control.",
"Regresión múltiple III."),
stringsAsFactors = FALSE
)
kable(tabla_curso, format = "html", align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE)
rmarkdown::render("index.Rmd")
rmarkdown::render("pasosbasicos.Rmd")
rmarkdown::render("pasosbasicos.Rmd")
setwd("/Volumes/Macintosh HD - Datos/12 PUCP-Docencia/2025/Estadística 1/Estadistica1CienciaPolitica")
rmarkdown::render("pasosbasicos.Rmd")
# Crear un data frame con países y sus continentes
paises_continentes <- data.frame(
Country = c("Finland", "Denmark", "Iceland", "Sweden", "Netherlands", "Costa Rica",
"Norway", "Israel", "Luxembourg", "Mexico", "Australia", "New Zealand",
"Switzerland", "Belgium", "Ireland", "Lithuania", "Austria", "Canada",
"Slovenia", "Czechia", "United Arab Emirates", "Germany", "United Kingdom",
"United States", "Belize", "Poland", "Taiwan Province of China", "Uruguay",
"Kosovo", "Kuwait", "Serbia", "Saudi Arabia", "France", "Singapore",
"Romania", "Brazil", "El Salvador", "Spain", "Estonia", "Italy", "Panama",
"Argentina", "Kazakhstan", "Guatemala", "Chile", "Viet Nam", "Nicaragua",
"Malta", "Thailand", "Slovakia", "Latvia", "Oman", "Uzbekistan", "Paraguay",
"Japan", "Bosnia and Herzegovina", "Philippines", "Republic of Korea",
"Bahrain", "Portugal", "Colombia", "Ecuador", "Honduras", "Malaysia",
"Peru", "Russian Federation", "Cyprus", "China", "Hungary", "Trinidad and Tobago",
"Montenegro", "Croatia", "Jamaica", "Bolivia", "Kyrgyzstan", "Dominican Republic",
"Mongolia", "Mauritius", "Libya", "Republic of Moldova", "Greece", "Venezuela",
"Indonesia", "Algeria", "Bulgaria", "North Macedonia", "Armenia",
"Hong Kong SAR of China", "Albania", "Tajikistan", "Georgia", "Nepal",
"Lao PDR", "Türkiye", "South Africa", "Mozambique", "Gabon", "Côte d’Ivoire",
"Iran", "Congo", "Iraq", "Guinea", "Namibia", "Cameroon", "Nigeria",
"Azerbaijan", "Senegal", "State of Palestine", "Pakistan", "Niger",
"Ukraine", "Morocco", "Tunisia", "Mauritania", "Kenya", "Uganda",
"Gambia", "India", "Chad", "Burkina Faso", "Benin", "Somalia", "Mali",
"Cambodia", "Ghana", "Myanmar", "Togo", "Jordan", "Liberia", "Madagascar",
"Zambia", "Ethiopia", "Sri Lanka", "Bangladesh", "Egypt", "Tanzania",
"Eswatini", "Lesotho", "Comoros", "Yemen", "DR Congo", "Botswana",
"Zimbabwe", "Malawi", "Lebanon", "Sierra Leone", "Afghanistan"),
Continent = c("Europe", "Europe", "Europe", "Europe", "Europe", "North America",
"Europe", "Asia", "Europe", "North America", "Oceania", "Oceania",
"Europe", "Europe", "Europe", "Europe", "Europe", "North America",
"Europe", "Europe", "Asia", "Europe", "Europe", "North America",
"North America", "Europe", "Asia", "South America", "Europe", "Asia",
"Europe", "Asia", "Europe", "Asia", "Europe", "South America",
"North America", "Europe", "Europe", "Europe", "North America",
"South America", "Asia", "North America", "South America", "Asia",
"North America", "Europe", "Asia", "Europe", "Europe", "Asia", "Asia",
"South America", "Asia", "Europe", "Asia", "Asia", "Asia", "Europe",
"South America", "South America", "North America", "Asia", "South America",
"Europe", "Asia", "Europe", "North America", "Europe", "Europe",
"North America", "South America", "Asia", "North America", "Africa",
"Europe", "Europe", "South America", "Asia", "Africa", "Europe", "Europe",
"Europe", "Asia", "Europe", "Asia", "Asia", "Asia", "Asia", "Asia",
"Asia", "Africa", "Africa", "Africa", "Africa", "Asia", "Africa",
"Asia", "Africa", "Africa", "Africa", "Africa", "Asia", "Africa",
"Asia", "Asia", "Africa", "Africa", "Africa", "Africa", "Africa",
"Asia", "Africa", "Asia", "Africa", "Asia", "Asia", "Africa", "Africa",
"Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa",
"Africa", "Africa", "Africa", "Asia", "Africa", "Africa", "Africa")
)
# Crear un data frame con países y sus continentes
paises_continentes <- data.frame(
Country = c("Finland", "Denmark", "Iceland", "Sweden", "Netherlands", "Costa Rica",
"Norway", "Israel", "Luxembourg", "Mexico", "Australia", "New Zealand",
"Switzerland", "Belgium", "Ireland", "Lithuania", "Austria", "Canada",
"Slovenia", "Czechia", "United Arab Emirates", "Germany", "United Kingdom",
"United States", "Belize", "Poland", "Taiwan Province of China", "Uruguay",
"Kosovo", "Kuwait", "Serbia", "Saudi Arabia", "France", "Singapore",
"Romania", "Brazil", "El Salvador", "Spain", "Estonia", "Italy", "Panama",
"Argentina", "Kazakhstan", "Guatemala", "Chile", "Viet Nam", "Nicaragua",
"Malta", "Thailand", "Slovakia", "Latvia", "Oman", "Uzbekistan", "Paraguay",
"Japan", "Bosnia and Herzegovina", "Philippines", "Republic of Korea",
"Bahrain", "Portugal", "Colombia", "Ecuador", "Honduras", "Malaysia",
"Peru", "Russian Federation", "Cyprus", "China", "Hungary", "Trinidad and Tobago",
"Montenegro", "Croatia", "Jamaica", "Bolivia", "Kyrgyzstan", "Dominican Republic",
"Mongolia", "Mauritius", "Libya", "Republic of Moldova", "Greece", "Venezuela",
"Indonesia", "Algeria", "Bulgaria", "North Macedonia", "Armenia",
"Hong Kong SAR of China", "Albania", "Tajikistan", "Georgia", "Nepal",
"Lao PDR", "Türkiye", "South Africa", "Mozambique", "Gabon", "Côte d’Ivoire",
"Iran", "Congo", "Iraq", "Guinea", "Namibia", "Cameroon", "Nigeria",
"Azerbaijan", "Senegal", "State of Palestine", "Pakistan", "Niger",
"Ukraine", "Morocco", "Tunisia", "Mauritania", "Kenya", "Uganda",
"Gambia", "India", "Chad", "Burkina Faso", "Benin", "Somalia", "Mali",
"Cambodia", "Ghana", "Myanmar", "Togo", "Jordan", "Liberia", "Madagascar",
"Zambia", "Ethiopia", "Sri Lanka", "Bangladesh", "Egypt", "Tanzania",
"Eswatini", "Lesotho", "Comoros", "Yemen", "DR Congo", "Botswana",
"Zimbabwe", "Malawi", "Lebanon", "Sierra Leone", "Afghanistan"),
Continent = c("Europe", "Europe", "Europe", "Europe", "Europe", "North America",
"Europe", "Asia", "Europe", "North America", "Oceania", "Oceania",
"Europe", "Europe", "Europe", "Europe", "Europe", "North America",
"Europe", "Europe", "Asia", "Europe", "Europe", "North America",
"North America", "Europe", "Asia", "South America", "Europe", "Asia",
"Europe", "Asia", "Europe", "Asia", "Europe", "South America",
"North America", "Europe", "Europe", "Europe", "North America",
"South America", "Asia", "North America", "South America", "Asia",
"North America", "Europe", "Asia", "Europe", "Europe", "Asia", "Asia",
"South America", "Asia", "Europe", "Asia", "Asia", "Asia", "Europe",
"South America", "South America", "North America", "Asia", "South America",
"Europe", "Asia", "Europe", "North America", "Europe", "Europe",
"North America", "South America", "Asia", "North America", "Africa",
"Europe", "Europe", "South America", "Asia", "Africa", "Europe", "Europe",
"Europe", "Asia", "Europe", "Asia", "Asia", "Asia", "Asia", "Asia",
"Asia", "Africa", "Africa", "Africa", "Africa", "Asia", "Africa",
"Asia", "Africa", "Africa", "Africa", "Africa", "Asia", "Africa",
"Asia", "Asia", "Africa", "Africa", "Africa", "Africa", "Africa",
"Asia", "Africa", "Asia", "Africa", "Asia", "Asia", "Africa", "Africa",
"Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa",
"Africa", "Africa", "Africa", "Asia", "Africa", "Africa", "Africa")
)
library(rio)
felicidad=import("felicidad.xlsx")
names(felicidad)
which.max(felicidad$Indice_de_felicidad)
summary(felicidad$Indice_de_felicidad)
ggplot(felicidad, aes(x=Indice_de_felicidad)) +
geom_histogram(binwidth=0.5, fill="skyblue", color="black") +
labs(title="Histograma de Felicidad", x="Puntuación de Felicidad", y="Frecuencia") +
theme_minimal()
library(ggplot2)
ggplot(felicidad, aes(x=Indice_de_felicidad)) +
geom_histogram(binwidth=0.5, fill="skyblue", color="black") +
labs(title="Histograma de Felicidad", x="Puntuación de Felicidad", y="Frecuencia") +
theme_minimal()
ggplot(felicidad, aes(x=Indice_de_felicidad, fill=..count..)) +
geom_histogram(binwidth=0.5, color="black") +
scale_fill_gradient(low="blue", high="red") +
labs(title="Histograma de Felicidad con Colores", x="Puntuación de Felicidad", y="Frecuencia") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face="bold", size=14),
axis.title = element_text(face="bold"),
legend.position = "none")  # Ocultar leyenda para estética
ggplot(felicidad, aes(x=Indice_de_felicidad, fill=..count..)) +
geom_histogram(binwidth=0.5, color="black") +
scale_fill_gradient(low="blue", high="red") +
labs(title="Histograma de Felicidad con Colores", x="Puntuación de Felicidad", y="Frecuencia") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face="bold", size=14),
axis.title = element_text(face="bold"),
legend.position = "none")  # Ocultar leyenda para estética
View(felicidad)
View(felicidad)
# Calcular la cantidad de países por continente
conteo_continente <- Country %>%
group_by(Continente) %>%
summarise(Cantidad = n()) %>%
arrange(desc(Cantidad))
# Calcular la cantidad de países por continente
library(tidyverse)
conteo_continente <- Country %>%
group_by(Continente) %>%
summarise(Cantidad = n()) %>%
arrange(desc(Cantidad))
# Calcular la cantidad de países por continente
library(tidyverse)
conteo_continente <- felicidad %>%
group_by(Continente) %>%
summarise(Cantidad = n(Country)) %>%
arrange(desc(Cantidad))
# Calcular la cantidad de países por continente
library(tidyverse)
conteo_continente <- felicidad %>%
group_by(Continente) %>%
summarise(Cantidad = n()) %>%
arrange(desc(Cantidad))
View(conteo_continente)
ggplot(conteo_continente, aes(x = Continente, y = Cantidad, fill = Continente)) +
geom_bar(stat = "identity", show.legend = FALSE) +
scale_fill_brewer(palette = "Set2") +  # Colores atractivos
labs(title = "Cantidad de Países por Continente", x = "Continente", y = "Número de Países") +
theme_minimal() +
theme(plot.title = element_text(hjust=0.5, face="bold", size=14))
summary(felicidad$Indice_de_felicidad)
felicidad <- felicidad %>%
mutate(Grados_felicidad = cut(Indice_de_felicidad,
breaks = c(1, 2, 4, 6, 10),  # Definir los cortes
labels = c("Bajo", "Medio-Bajo", "Medio-Alto", "Alto"),
ordered_result = TRUE))  # Variable ordinal
table(felicidad$Grados_felicidad)
felicidad <- felicidad %>%
mutate(Grados_felicidad = cut(Indice_de_felicidad,
breaks = c(1, 3, 4, 6, 10),  # Definir los cortes
labels = c("Bajo", "Medio-Bajo", "Medio-Alto", "Alto"),
ordered_result = TRUE))  # Variable ordinal
table(felicidad$Grados_felicidad)
quantile(felicidad$Indice_de_felicidad)
felicidad <- felicidad %>%
mutate(Grados_felicidad = cut(Indice_de_felicidad,
breaks = c(1, 3, 5, 7, 10),  # Definir los cortes
labels = c("Bajo", "Medio-Bajo", "Medio-Alto", "Alto"),
ordered_result = TRUE))  # Variable ordinal
table(felicidad$Grados_felicidad)
# Crear una tabla de frecuencia
tabla_frecuencia <- felicidad %>%
count(Grados_felicidad) %>%
mutate(Porcentaje = round(n / sum(n) * 100, 1))
# Crear una tabla de frecuencia
tabla_frecuencia <- felicidad %>%
count(Grados_felicidad) %>%
mutate(Porcentaje = round(n / sum(n) * 100, 1))
tabla_frecuencia
felicidad <- felicidad %>%
mutate(Grados_felicidad = cut(Indice_de_felicidad,
breaks = c(1, 3, 5, 7, 10),  # Definir los cortes
labels = c("Bajo", "Medio-Bajo", "Medio-Alto", "Alto"),
ordered_result = TRUE))  # Variable ordinal
# Crear una tabla de frecuencia
tabla_frecuencia <- felicidad %>%
count(Grados_felicidad) %>%
mutate(Porcentaje = round(n / sum(n) * 100, 1))
tabla_frecuencia
