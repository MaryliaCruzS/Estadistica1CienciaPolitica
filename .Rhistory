"Parcial.",
"Asociación y correlación. Variables dependientes e independientes. Diagramas de dispersión. Coeficiente de correlación de Pearson y R².",
"Regresión simple. Método de mínimos cuadrados. Ecuación de la recta.",
"Introducción a la regresión múltiple.",
"Regresión múltiple II. Variables de control.",
"Regresión múltiple III."),
stringsAsFactors = FALSE
)
kable(tabla_curso, format = "html", align = "c") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE)
rmarkdown::render("index.Rmd")
rmarkdown::render("pasosbasicos.Rmd")
rmarkdown::render("pasosbasicos.Rmd")
setwd("/Volumes/Macintosh HD - Datos/12 PUCP-Docencia/2025/Estadística 1/Estadistica1CienciaPolitica")
rmarkdown::render("pasosbasicos.Rmd")
# Crear un data frame con países y sus continentes
paises_continentes <- data.frame(
Country = c("Finland", "Denmark", "Iceland", "Sweden", "Netherlands", "Costa Rica",
"Norway", "Israel", "Luxembourg", "Mexico", "Australia", "New Zealand",
"Switzerland", "Belgium", "Ireland", "Lithuania", "Austria", "Canada",
"Slovenia", "Czechia", "United Arab Emirates", "Germany", "United Kingdom",
"United States", "Belize", "Poland", "Taiwan Province of China", "Uruguay",
"Kosovo", "Kuwait", "Serbia", "Saudi Arabia", "France", "Singapore",
"Romania", "Brazil", "El Salvador", "Spain", "Estonia", "Italy", "Panama",
"Argentina", "Kazakhstan", "Guatemala", "Chile", "Viet Nam", "Nicaragua",
"Malta", "Thailand", "Slovakia", "Latvia", "Oman", "Uzbekistan", "Paraguay",
"Japan", "Bosnia and Herzegovina", "Philippines", "Republic of Korea",
"Bahrain", "Portugal", "Colombia", "Ecuador", "Honduras", "Malaysia",
"Peru", "Russian Federation", "Cyprus", "China", "Hungary", "Trinidad and Tobago",
"Montenegro", "Croatia", "Jamaica", "Bolivia", "Kyrgyzstan", "Dominican Republic",
"Mongolia", "Mauritius", "Libya", "Republic of Moldova", "Greece", "Venezuela",
"Indonesia", "Algeria", "Bulgaria", "North Macedonia", "Armenia",
"Hong Kong SAR of China", "Albania", "Tajikistan", "Georgia", "Nepal",
"Lao PDR", "Türkiye", "South Africa", "Mozambique", "Gabon", "Côte d’Ivoire",
"Iran", "Congo", "Iraq", "Guinea", "Namibia", "Cameroon", "Nigeria",
"Azerbaijan", "Senegal", "State of Palestine", "Pakistan", "Niger",
"Ukraine", "Morocco", "Tunisia", "Mauritania", "Kenya", "Uganda",
"Gambia", "India", "Chad", "Burkina Faso", "Benin", "Somalia", "Mali",
"Cambodia", "Ghana", "Myanmar", "Togo", "Jordan", "Liberia", "Madagascar",
"Zambia", "Ethiopia", "Sri Lanka", "Bangladesh", "Egypt", "Tanzania",
"Eswatini", "Lesotho", "Comoros", "Yemen", "DR Congo", "Botswana",
"Zimbabwe", "Malawi", "Lebanon", "Sierra Leone", "Afghanistan"),
Continent = c("Europe", "Europe", "Europe", "Europe", "Europe", "North America",
"Europe", "Asia", "Europe", "North America", "Oceania", "Oceania",
"Europe", "Europe", "Europe", "Europe", "Europe", "North America",
"Europe", "Europe", "Asia", "Europe", "Europe", "North America",
"North America", "Europe", "Asia", "South America", "Europe", "Asia",
"Europe", "Asia", "Europe", "Asia", "Europe", "South America",
"North America", "Europe", "Europe", "Europe", "North America",
"South America", "Asia", "North America", "South America", "Asia",
"North America", "Europe", "Asia", "Europe", "Europe", "Asia", "Asia",
"South America", "Asia", "Europe", "Asia", "Asia", "Asia", "Europe",
"South America", "South America", "North America", "Asia", "South America",
"Europe", "Asia", "Europe", "North America", "Europe", "Europe",
"North America", "South America", "Asia", "North America", "Africa",
"Europe", "Europe", "South America", "Asia", "Africa", "Europe", "Europe",
"Europe", "Asia", "Europe", "Asia", "Asia", "Asia", "Asia", "Asia",
"Asia", "Africa", "Africa", "Africa", "Africa", "Asia", "Africa",
"Asia", "Africa", "Africa", "Africa", "Africa", "Asia", "Africa",
"Asia", "Asia", "Africa", "Africa", "Africa", "Africa", "Africa",
"Asia", "Africa", "Asia", "Africa", "Asia", "Asia", "Africa", "Africa",
"Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa",
"Africa", "Africa", "Africa", "Asia", "Africa", "Africa", "Africa")
)
# Crear un data frame con países y sus continentes
paises_continentes <- data.frame(
Country = c("Finland", "Denmark", "Iceland", "Sweden", "Netherlands", "Costa Rica",
"Norway", "Israel", "Luxembourg", "Mexico", "Australia", "New Zealand",
"Switzerland", "Belgium", "Ireland", "Lithuania", "Austria", "Canada",
"Slovenia", "Czechia", "United Arab Emirates", "Germany", "United Kingdom",
"United States", "Belize", "Poland", "Taiwan Province of China", "Uruguay",
"Kosovo", "Kuwait", "Serbia", "Saudi Arabia", "France", "Singapore",
"Romania", "Brazil", "El Salvador", "Spain", "Estonia", "Italy", "Panama",
"Argentina", "Kazakhstan", "Guatemala", "Chile", "Viet Nam", "Nicaragua",
"Malta", "Thailand", "Slovakia", "Latvia", "Oman", "Uzbekistan", "Paraguay",
"Japan", "Bosnia and Herzegovina", "Philippines", "Republic of Korea",
"Bahrain", "Portugal", "Colombia", "Ecuador", "Honduras", "Malaysia",
"Peru", "Russian Federation", "Cyprus", "China", "Hungary", "Trinidad and Tobago",
"Montenegro", "Croatia", "Jamaica", "Bolivia", "Kyrgyzstan", "Dominican Republic",
"Mongolia", "Mauritius", "Libya", "Republic of Moldova", "Greece", "Venezuela",
"Indonesia", "Algeria", "Bulgaria", "North Macedonia", "Armenia",
"Hong Kong SAR of China", "Albania", "Tajikistan", "Georgia", "Nepal",
"Lao PDR", "Türkiye", "South Africa", "Mozambique", "Gabon", "Côte d’Ivoire",
"Iran", "Congo", "Iraq", "Guinea", "Namibia", "Cameroon", "Nigeria",
"Azerbaijan", "Senegal", "State of Palestine", "Pakistan", "Niger",
"Ukraine", "Morocco", "Tunisia", "Mauritania", "Kenya", "Uganda",
"Gambia", "India", "Chad", "Burkina Faso", "Benin", "Somalia", "Mali",
"Cambodia", "Ghana", "Myanmar", "Togo", "Jordan", "Liberia", "Madagascar",
"Zambia", "Ethiopia", "Sri Lanka", "Bangladesh", "Egypt", "Tanzania",
"Eswatini", "Lesotho", "Comoros", "Yemen", "DR Congo", "Botswana",
"Zimbabwe", "Malawi", "Lebanon", "Sierra Leone", "Afghanistan"),
Continent = c("Europe", "Europe", "Europe", "Europe", "Europe", "North America",
"Europe", "Asia", "Europe", "North America", "Oceania", "Oceania",
"Europe", "Europe", "Europe", "Europe", "Europe", "North America",
"Europe", "Europe", "Asia", "Europe", "Europe", "North America",
"North America", "Europe", "Asia", "South America", "Europe", "Asia",
"Europe", "Asia", "Europe", "Asia", "Europe", "South America",
"North America", "Europe", "Europe", "Europe", "North America",
"South America", "Asia", "North America", "South America", "Asia",
"North America", "Europe", "Asia", "Europe", "Europe", "Asia", "Asia",
"South America", "Asia", "Europe", "Asia", "Asia", "Asia", "Europe",
"South America", "South America", "North America", "Asia", "South America",
"Europe", "Asia", "Europe", "North America", "Europe", "Europe",
"North America", "South America", "Asia", "North America", "Africa",
"Europe", "Europe", "South America", "Asia", "Africa", "Europe", "Europe",
"Europe", "Asia", "Europe", "Asia", "Asia", "Asia", "Asia", "Asia",
"Asia", "Africa", "Africa", "Africa", "Africa", "Asia", "Africa",
"Asia", "Africa", "Africa", "Africa", "Africa", "Asia", "Africa",
"Asia", "Asia", "Africa", "Africa", "Africa", "Africa", "Africa",
"Asia", "Africa", "Asia", "Africa", "Asia", "Asia", "Africa", "Africa",
"Africa", "Africa", "Africa", "Africa", "Africa", "Africa", "Africa",
"Africa", "Africa", "Africa", "Asia", "Africa", "Africa", "Africa")
)
library(rio)
felicidad=import("felicidad.xlsx")
names(felicidad)
which.max(felicidad$Indice_de_felicidad)
summary(felicidad$Indice_de_felicidad)
ggplot(felicidad, aes(x=Indice_de_felicidad)) +
geom_histogram(binwidth=0.5, fill="skyblue", color="black") +
labs(title="Histograma de Felicidad", x="Puntuación de Felicidad", y="Frecuencia") +
theme_minimal()
library(ggplot2)
ggplot(felicidad, aes(x=Indice_de_felicidad)) +
geom_histogram(binwidth=0.5, fill="skyblue", color="black") +
labs(title="Histograma de Felicidad", x="Puntuación de Felicidad", y="Frecuencia") +
theme_minimal()
ggplot(felicidad, aes(x=Indice_de_felicidad, fill=..count..)) +
geom_histogram(binwidth=0.5, color="black") +
scale_fill_gradient(low="blue", high="red") +
labs(title="Histograma de Felicidad con Colores", x="Puntuación de Felicidad", y="Frecuencia") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face="bold", size=14),
axis.title = element_text(face="bold"),
legend.position = "none")  # Ocultar leyenda para estética
ggplot(felicidad, aes(x=Indice_de_felicidad, fill=..count..)) +
geom_histogram(binwidth=0.5, color="black") +
scale_fill_gradient(low="blue", high="red") +
labs(title="Histograma de Felicidad con Colores", x="Puntuación de Felicidad", y="Frecuencia") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5, face="bold", size=14),
axis.title = element_text(face="bold"),
legend.position = "none")  # Ocultar leyenda para estética
View(felicidad)
View(felicidad)
# Calcular la cantidad de países por continente
conteo_continente <- Country %>%
group_by(Continente) %>%
summarise(Cantidad = n()) %>%
arrange(desc(Cantidad))
# Calcular la cantidad de países por continente
library(tidyverse)
conteo_continente <- Country %>%
group_by(Continente) %>%
summarise(Cantidad = n()) %>%
arrange(desc(Cantidad))
# Calcular la cantidad de países por continente
library(tidyverse)
conteo_continente <- felicidad %>%
group_by(Continente) %>%
summarise(Cantidad = n(Country)) %>%
arrange(desc(Cantidad))
# Calcular la cantidad de países por continente
library(tidyverse)
conteo_continente <- felicidad %>%
group_by(Continente) %>%
summarise(Cantidad = n()) %>%
arrange(desc(Cantidad))
View(conteo_continente)
ggplot(conteo_continente, aes(x = Continente, y = Cantidad, fill = Continente)) +
geom_bar(stat = "identity", show.legend = FALSE) +
scale_fill_brewer(palette = "Set2") +  # Colores atractivos
labs(title = "Cantidad de Países por Continente", x = "Continente", y = "Número de Países") +
theme_minimal() +
theme(plot.title = element_text(hjust=0.5, face="bold", size=14))
summary(felicidad$Indice_de_felicidad)
felicidad <- felicidad %>%
mutate(Grados_felicidad = cut(Indice_de_felicidad,
breaks = c(1, 2, 4, 6, 10),  # Definir los cortes
labels = c("Bajo", "Medio-Bajo", "Medio-Alto", "Alto"),
ordered_result = TRUE))  # Variable ordinal
table(felicidad$Grados_felicidad)
felicidad <- felicidad %>%
mutate(Grados_felicidad = cut(Indice_de_felicidad,
breaks = c(1, 3, 4, 6, 10),  # Definir los cortes
labels = c("Bajo", "Medio-Bajo", "Medio-Alto", "Alto"),
ordered_result = TRUE))  # Variable ordinal
table(felicidad$Grados_felicidad)
quantile(felicidad$Indice_de_felicidad)
felicidad <- felicidad %>%
mutate(Grados_felicidad = cut(Indice_de_felicidad,
breaks = c(1, 3, 5, 7, 10),  # Definir los cortes
labels = c("Bajo", "Medio-Bajo", "Medio-Alto", "Alto"),
ordered_result = TRUE))  # Variable ordinal
table(felicidad$Grados_felicidad)
# Crear una tabla de frecuencia
tabla_frecuencia <- felicidad %>%
count(Grados_felicidad) %>%
mutate(Porcentaje = round(n / sum(n) * 100, 1))
# Crear una tabla de frecuencia
tabla_frecuencia <- felicidad %>%
count(Grados_felicidad) %>%
mutate(Porcentaje = round(n / sum(n) * 100, 1))
tabla_frecuencia
felicidad <- felicidad %>%
mutate(Grados_felicidad = cut(Indice_de_felicidad,
breaks = c(1, 3, 5, 7, 10),  # Definir los cortes
labels = c("Bajo", "Medio-Bajo", "Medio-Alto", "Alto"),
ordered_result = TRUE))  # Variable ordinal
# Crear una tabla de frecuencia
tabla_frecuencia <- felicidad %>%
count(Grados_felicidad) %>%
mutate(Porcentaje = round(n / sum(n) * 100, 1))
tabla_frecuencia
knitr::include_graphics("diccionario_enades2024.png")
knitr::include_graphics("pd2_QSAnalisisDesc.png")
library(rio) #Convocamos el paquete
data=import("pd2_enades2024.xlsx")
library(rio) #Convocamos el paquete
data=import("pd2_enades2024.xlsx")
View(data)
str(data) #revisamos las variables
library(dplyr)
data <- data %>%
mutate(d_educ = case_when( d_educ == 1 ~ 4,
d_educ == 2 ~ 3,
d_educ == 3 ~ 2,
d_educ == 4 ~ 1),
d_salud = case_when(d_salud == 1 ~ 4,
d_salud == 2 ~ 3,
d_salud == 3 ~ 2,
d_salud == 4 ~ 1),
d_trabajo = case_when(d_trabajo == 1 ~ 4,
d_trabajo == 2 ~ 3,
d_trabajo == 3 ~ 2,
d_trabajo == 4 ~ 1),
d_justicia = case_when(d_justicia == 1 ~ 4,
d_justicia == 2 ~ 3,
d_justicia == 3 ~ 2,
d_justicia == 4 ~ 1))
data <- data %>%
mutate(across(c(d_educ, d_salud, d_trabajo, d_justicia),
~ case_when(
. == 1 ~ 4,
. == 2 ~ 3,
. == 3 ~ 2,
. == 4 ~ 1)))
str(data)
data=data %>%
mutate(suma = d_educ + d_salud + d_trabajo + d_justicia)
summary(data$suma)
library(scales)
data = data %>%
mutate(indicador = rescale(suma, to = c(0, 100)))
data %>%
group_by(clase) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
data = data %>%
mutate(clase = factor(clase, levels = 1:4, labels = c("Alta", "Media alta", "Media baja", "Baja"), ordered = TRUE))
data%>%
group_by(clase) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
library(ggplot2)
ggplot(data, aes(x=clase, y=indicador, color=clase)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2),alpha=0.6) +#para agregar los casos como puntos
theme_classic()
class(data$P07)
data %>%
group_by(P07) %>%
summarise(Freq=n()) #Veamos los niveles de la variable
data = data %>%
mutate(P07 = factor(P07, levels = 1:4, labels = c("Nada", "Poco", "Algo", "Mucho"), ordered = TRUE))
data %>%
group_by(P07) %>%
summarise(Freq=n())
para_grafico=data %>%
group_by(P07) %>%
summarize(Freq=n()) %>%
mutate(Porcentaje = (Freq / sum(Freq))*100)
para_grafico
data %>%
filter(edad<30)%>%
group_by(P07) %>%
summarize(Freq=n()) %>%
mutate(Porcentaje = (Freq / sum(Freq))*100)
ggplot(para_grafico, aes(x=P07, y=Porcentaje, fill=P07)) +
geom_bar(stat = "identity") +
theme_bw()
library(tayloRswift) #opcional (una ventaja de que R sea software libre)
install.packages("tayloRswift")
library(tayloRswift) #opcional (una ventaja de que R sea software libre)
ggplot(para_grafico, aes(x=P07, y=Porcentaje, fill=P07)) +
geom_bar(stat = "identity")  +
ggtitle("Percepción de desigualdad económica") +
xlab("¿Qué tan desigual cree que es el Perú económicamente") + ylab("Porcentaje")+
geom_text(aes(label=round(Porcentaje,1)), vjust=1.30, color="black", size=3)+
theme(panel.background=element_rect(fill = "white", colour = "white")) +
scale_fill_taylor(palette = "lover") #fearless, speakNow, Red
data=import("BD_ECB 2021.xlsx")
View(data)
str(data) #revisamos las variables
library(dplyr)
data <- data %>%
mutate(P57 = case_when( d_educ == 1 ~ 4,
d_educ == 2 ~ 3,
d_educ == 3 ~ 2,
d_educ == 4 ~ 1))
library(dplyr)
data <- data %>%
mutate(P57 = case_when( P57 == 1 ~ 4,
P57 == 2 ~ 3,
P57 == 3 ~ 2,
P57 == 4 ~ 1))
data=data %>%
mutate(suma = P53, P54, P55, P56, P57)
summary(data$suma)
library(scales)
data = data %>%
mutate(indicador = rescale(suma, to = c(0, 100)))
data %>%
group_by(clase) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
data %>%
group_by(sexo) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
data %>%
group_by(GENERO) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
data %>%
group_by(GRUPO_EDAD) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
data=data %>%
mutate(suma = P84, P85, P86, P87, P88)
summary(data$suma)
library(scales)
data = data %>%
mutate(indicador = rescale(suma, to = c(0, 100)))
data %>%
group_by(P82) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
data = data %>%
mutate(P82 = factor(P82, levels = 1:3, labels = c("Alta", "Media", "Baja"), ordered = TRUE))
data%>%
group_by(P82) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
data = data %>%
mutate(P82 = factor(P82, levels = 1:4, labels = c("Nada", "Poco", "Algo", "Mucho"), ordered = TRUE))
data%>%
group_by(P82) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
library(rio) #Convocamos el paquete
data=import("BD_ECB 2021.xlsx")
library(dplyr)
data <- data %>%
mutate(P57 = case_when( P57 == 1 ~ 4,
P57 == 2 ~ 3,
P57 == 3 ~ 2,
P57 == 4 ~ 1))
data=data %>%
mutate(suma = P84, P85, P86, P87, P88)
summary(data$suma)
library(scales)
data = data %>%
mutate(indicador = rescale(suma, to = c(0, 100)))
data %>%
group_by(P82) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
data = data %>%
mutate(P82 = factor(P82, levels = 1:4, labels = c("Nada", "Poco", "Algo", "Mucho"), ordered = TRUE))
data%>%
group_by(P82) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
library(ggplot2)
ggplot(data, aes(x=clase, y=indicador, color=clase)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2),alpha=0.6) +#para agregar los casos como puntos
theme_classic()
library(ggplot2)
ggplot(data, aes(x=P82, y=indicador, color=P82)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2),alpha=0.6) +#para agregar los casos como puntos
theme_classic()
data%>%
group_by(GRUPO_EDAD) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
library(ggplot2)
ggplot(data, aes(x=P82, y=indicador, color=P82)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2),alpha=0.6) +#para agregar los casos como puntos
theme_classic()
library(ggplot2)
ggplot(data, aes(x=GRUPO_EDAD, y=indicador, color=GRUPO_EDAD)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2),alpha=0.6) +#para agregar los casos como puntos
theme_classic()
data = data %>%
mutate(GRUPO_EDAD = factor(GRUPO_EDAD, levels = 1:3, labels = c("18-24", "25-39", "40 años a más", "Mucho"), ordered = TRUE))
data = data %>%
mutate(GRUPO_EDAD = factor(GRUPO_EDAD, levels = 1:3, labels = c("18-24", "25-39", "40 años a más"), ordered = TRUE))
data%>%
group_by(GRUPO_EDAD) %>%
summarise(
Media = mean(indicador),
Mediana = median(indicador),
Desviacion = sd(indicador),
Minimo = min(indicador),
Maximo = max(indicador),
Q1 = quantile(indicador, 0.25), #Primer cuartil
Q3 = quantile(indicador, 0.75) #Tercer cuartil
)
library(ggplot2)
ggplot(data, aes(x=GRUPO_EDAD, y=indicador, color=GRUPO_EDAD)) +
geom_boxplot() +
geom_jitter(shape=16, position=position_jitter(0.2),alpha=0.6) +#para agregar los casos como puntos
theme_classic()
